// Autogenerated from Pigeon (v3.2.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
import Flutter

/// Generated class from Pigeon.

/// Generated class from Pigeon that represents data sent in messages.
struct EstimoteBeacon {
  var uuid: String? = nil

  static func fromMap(_ map: [String: Any?]) -> EstimoteBeacon? {
    let uuid = map["uuid"] as? String 

    return EstimoteBeacon(
      uuid: uuid
    )
  }
  func toMap() -> [String: Any?] {
    return [
      "uuid": uuid
    ]
  }
}
private class EstimoteAPICodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return EstimoteBeacon.fromMap(self.readValue() as! [String: Any])      
      default:
        return super.readValue(ofType: type)
      
    }
  }
}
private class EstimoteAPICodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? EstimoteBeacon {
      super.writeByte(128)
      super.writeValue(value.toMap())
    } else {
      super.writeValue(value)
    }
  }
}

private class EstimoteAPICodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return EstimoteAPICodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return EstimoteAPICodecWriter(data: data)
  }
}

class EstimoteAPICodec: FlutterStandardMessageCodec {
  static let shared = EstimoteAPICodec(readerWriter: EstimoteAPICodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol EstimoteAPI {
  func fetch(uuid: String) -> EstimoteBeacon
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class EstimoteAPISetup {
  /// The codec used by EstimoteAPI.
  static var codec: FlutterStandardMessageCodec { EstimoteAPICodec.shared }
  /// Sets up an instance of `EstimoteAPI` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: EstimoteAPI?) {
    let fetchChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.EstimoteAPI.fetch", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      fetchChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let uuidArg = args[0] as! String
        let result = api.fetch(uuid: uuidArg)
        reply(wrapResult(result))
      }
    } else {
      fetchChannel.setMessageHandler(nil)
    }
  }
}

private func wrapResult(_ result: Any?) -> [String: Any?] {
  return ["result": result]
}

private func wrapError(_ error: FlutterError) -> [String: Any?] {
  return [
    "error": [
      "code": error.code,
      "message": error.message,
      "details": error.details
    ]
  ]
}
